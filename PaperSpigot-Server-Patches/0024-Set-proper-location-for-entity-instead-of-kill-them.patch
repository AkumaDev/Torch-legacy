From 9092e1147f112d058172b9d91dc804d04b28a356 Mon Sep 17 00:00:00 2001
From: SotrForgotten <i@omc.hk>
Date: Wed, 27 Jul 2016 22:14:56 +0800
Subject: [PATCH] Set proper location for entity instead of kill them.


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 088beb2..211c090 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -26,6 +26,8 @@ import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.server.RemoteServerCommandEvent;
 // CraftBukkit end
 
+import net.techcable.tacospigot.ImmutableArrayMap; // Torch
+
 public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
 
     private static final Logger LOGGER = LogManager.getLogger();
@@ -314,6 +316,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 return true;
             }
         }
+		
+		ImmutableArrayMap.deployed = true; // Torch
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
index 6ede27d..02059b5 100644
--- a/src/main/java/net/minecraft/server/EULA.java
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -21,14 +21,14 @@ public class EULA {
 
     private boolean a(File file) {
         FileInputStream fileinputstream = null;
-        boolean flag = false;
+        boolean flag = true; // Torch - EULA - auto agreement
 
         try {
             Properties properties = new Properties();
 
             fileinputstream = new FileInputStream(file);
             properties.load(fileinputstream);
-            flag = Boolean.parseBoolean(properties.getProperty("eula", "false"));
+            flag = Boolean.parseBoolean(properties.getProperty("eula", "true")); // Torch - auto
         } catch (Exception exception) {
             EULA.a.warn("Failed to load " + file);
             this.b();
@@ -50,7 +50,7 @@ public class EULA {
             Properties properties = new Properties();
 
             fileoutputstream = new FileOutputStream(this.b);
-            properties.setProperty("eula", "false");
+            properties.setProperty("eula", "true"); // Torch - auto
             properties.store(fileoutputstream, "By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula)." +
                     "\nand also agreeing that tacos are tasty.");  // TacoSpigot - fix lag
         } catch (Exception exception) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e02c619..d7da8d5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1084,7 +1084,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     public String getServerModName() {
-        return "TacoSpigot"; // TacoSpigot - TacoSpigot // PaperSpigot - PaperSpigot > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Torch"; // Torch - Torch > // TacoSpigot - TacoSpigot > // Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
diff --git a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
index ab6725c..f704a61 100644
--- a/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
+++ b/src/main/java/net/techcable/tacospigot/ImmutableArrayMap.java
@@ -19,8 +19,9 @@ public class ImmutableArrayMap<K, V> extends AbstractMap<K, V> implements Map<K,
     private final Object[] outlyingData;
     private final Entry<K, V>[] entries;
     private final int[] outlyingIds;
-
     private final int size;
+	
+	public static boolean deployed = false; // Torch
 
     @SuppressWarnings("Convert2Lambda") // The comparator is anonomous for performance reasons
     public ImmutableArrayMap(Indexer<K> getId, Map<K, V> map) {
@@ -49,7 +50,7 @@ public class ImmutableArrayMap<K, V> extends AbstractMap<K, V> implements Map<K,
         int minIndex = largestRangeOfSequentialValues == null ? -1 : largestRangeOfSequentialValues[0];
         int maxIndex = largestRangeOfSequentialValues == null ? -1 : largestRangeOfSequentialValues[1];
         int sequentalRangeSize = largestRangeOfSequentialValues == null ? 0 : largestRangeOfSequentialValues[2];
-        if (sequentalRangeSize < size / 2) {
+        if (sequentalRangeSize < size / 2 && this.deployed) {
             System.err.println("Less than 50% of values are sequential");
             System.err.print(sequentalRangeSize);
             System.err.print(" out of ");
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index c0a7160..7710345 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -32,7 +32,7 @@ public class TacoSpigotConfig {
         CONFIG_FILE = configFile;
         config = new YamlConfiguration();
         try {
-            System.out.println("Loading TacoSpigot config from " + configFile.getName());
+            // System.out.println("Loading TacoSpigot config from " + configFile.getName());
             config.load(CONFIG_FILE);
         } catch (IOException ex) {
         } catch (InvalidConfigurationException ex) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a2fb039..ea69881 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -127,7 +127,7 @@ import net.md_5.bungee.api.chat.BaseComponent;
 
 public final class CraftServer implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
-    private final String serverName = "CraftBukkit";
+    private final String serverName = "Torch"; // Torch
     private final String serverVersion;
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
diff --git a/src/main/java/org/spigotmc/Metrics.java b/src/main/java/org/spigotmc/Metrics.java
index f653050..2ccdcf8 100644
--- a/src/main/java/org/spigotmc/Metrics.java
+++ b/src/main/java/org/spigotmc/Metrics.java
@@ -344,7 +344,7 @@ public class Metrics {
      */
     private void postPlugin(final boolean isPing) throws IOException {
         // Server software specific section
-        String pluginName = "TacoSpigot"; // PaperSpigot - We need some usage data // TacoSpigot - its *my* usage data
+        String pluginName = "TorchSpigot"; // Paper - Keep old name for legacy data // TacoSpigot - Its *my* usage data // Torch - mod name
         boolean onlineMode = Bukkit.getServer().getOnlineMode(); // TRUE if online mode is enabled
         String pluginVersion = (Metrics.class.getPackage().getImplementationVersion() != null) ? Metrics.class.getPackage().getImplementationVersion() : "unknown";
         String serverVersion = Bukkit.getVersion();
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index c8f619a..9640dbe 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -19,7 +19,7 @@ public class WatchdogThread extends Thread
 
     private WatchdogThread(long timeoutTime, boolean restart)
     {
-        super( "PaperSpigot Watchdog Thread" );
+        super( "Torch Watchdog Thread" ); // Torch
         this.timeoutTime = timeoutTime;
         this.restart = restart;
     }
@@ -56,9 +56,9 @@ public class WatchdogThread extends Thread
             {
                 Logger log = Bukkit.getServer().getLogger();
                 log.log( Level.SEVERE, "The server has stopped responding!" );
-                log.log( Level.SEVERE, "Please report this to PaperSpigot directly!" );
+                log.log( Level.SEVERE, "Please report this to Torch directly!" ); // Torch
                 log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
-                log.log( Level.SEVERE, "PaperSpigot version: " + Bukkit.getServer().getVersion() );
+                log.log( Level.SEVERE, "Torch version: " + Bukkit.getServer().getVersion() ); // Torch
                 //
                 if(net.minecraft.server.World.haveWeSilencedAPhysicsCrash)
                 {
@@ -68,7 +68,7 @@ public class WatchdogThread extends Thread
                 }
                 //
                 log.log( Level.SEVERE, "------------------------------" );
-                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to PaperSpigot!):" );
+                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Torch!):" ); // Torch
                 dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().primaryThread.getId(), Integer.MAX_VALUE ), log );
                 log.log( Level.SEVERE, "------------------------------" );
                 //
-- 
2.8.2.windows.1

